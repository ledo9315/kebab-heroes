// prisma/schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement()) 

    fullName String 
    email    String   @unique
    password String 
    role     UserRole @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt 
}

model Category {
    id Int @id @default(autoincrement())

    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    variants ProductItem[]

    categoryId Int // categoryId INT
    category   Category @relation(fields: [categoryId], references: [id]) // categoryId INT, FOREIGN KEY (categoryId) REFERENCES Category(id)

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    productItemId Int
    product       Product @relation(fields: [productItemId], references: [id])

    cartItems CartItem[]

    price     Float
    size      Int?
    pizzaType Int?
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Float
    imageUrl String

    products  Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    userId Int?  @unique
    user   User? @relation(fields: [userId], references: [id])

    CartItems CartItem[]

    token String

    totalAmount Float @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productItemId Int
    productItem   ProductItem @relation(fields: [productItemId], references: [id])

    cartId Int
    cart       Cart @relation(fields: [cartId], references: [id])

    quantity Int

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    userId Int?
    user   User? @relation(fields: [userId], references: [id])

    token String

    totalAmount Float
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    userId Int  @unique
    user   User @relation(fields: [userId], references: [id])

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
